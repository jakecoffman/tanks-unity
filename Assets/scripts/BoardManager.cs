using UnityEngine;using UnityEngine.Networking;using System;using System.Collections.Generic;using Random = UnityEngine.Random;public class BoardManager : NetworkBehaviour {    [Serializable]    public class Count    {        public int minimum;        public int maximum;        public Count(int min, int max)        {            minimum = min;            maximum = max;        }    }    public int columns = 16;    public int rows = 8;    public Count wallCount = new Count(5, 9);    public GameObject[] floorTiles;    public GameObject[] wallTiles;    public GameObject networkStartPosition;    // just to keep the hierarchy clean    private Transform boardHolder;    // just for randomness    private List<Vector3> gridPositions = new List<Vector3>();    void InitList()    {        gridPositions.Clear();        // fill the innerds of the board, leave outer open to prevent impassable levels        for (int x=1; x < columns -1; x++)        {            for (int y=1; y<rows-1; y++)            {                gridPositions.Add(new Vector3(x, y, 0f));            }        }    }    void BoardSetup()    {        boardHolder = new GameObject("Board").transform;        for (int x=-1; x<columns+1; x++)        {            for (int y=-1; y<rows+1; y++)            {                GameObject toInstantiate = floorTiles[Random.Range(0, floorTiles.Length)];                if (x == -1 || x == columns || y == -1 || y == rows)                {                    toInstantiate = wallTiles[Random.Range(0, wallTiles.Length)];                }                GameObject instance = Instantiate(toInstantiate, new Vector3(x, y, 0f), Quaternion.identity) as GameObject;                instance.transform.SetParent(boardHolder);                NetworkServer.Spawn(instance);            }        }    }    Vector3 RandomPos()    {        int randomIndex = Random.Range(0, gridPositions.Count);        Vector3 randomPos = gridPositions[randomIndex];        gridPositions.RemoveAt(randomIndex);        return randomPos;    }    void LayoutObjectAtRandom(GameObject[] tileArray, int minimum, int maximum)    {        int objectCount = Random.Range(minimum, maximum + 1);        for (int i=0; i<objectCount; i++)        {            Vector3 randomPos = RandomPos();            GameObject tileChoice = tileArray[Random.Range(0, tileArray.Length)];            GameObject instance = Instantiate(tileChoice, randomPos, Quaternion.identity) as GameObject;            instance.transform.SetParent(boardHolder);            NetworkServer.Spawn(instance);        }    }    void Start()    {        Debug.LogError("Boardmanager - Start");    }    void Awake()    {        Debug.LogError("Boardmanager - Awake");        // set player spawn points        Instantiate(networkStartPosition, new Vector3(0, 0, 0f), Quaternion.identity);        Instantiate(networkStartPosition, new Vector3(columns - 1, 0, 0f), Quaternion.identity);        Instantiate(networkStartPosition, new Vector3(columns - 1, rows - 1, 0f), Quaternion.identity);        Instantiate(networkStartPosition, new Vector3(0, rows - 1, 0f), Quaternion.identity);        //NetworkServer.Spawn(spawn1);        //NetworkServer.Spawn(spawn2);        //NetworkServer.Spawn(spawn3);        //NetworkServer.Spawn(spawn4);    }    public override void OnStartServer()    {        Debug.LogError("Board manager - OnServerStarted");        // make outer walls        BoardSetup();        // prepare for randomness        InitList();        // make random interesting walls        LayoutObjectAtRandom(wallTiles, wallCount.minimum, wallCount.maximum);    }    public override void OnStartClient()    {        base.OnStartClient();        Debug.LogError("Board manager - OnStartClient " + netId);    }}