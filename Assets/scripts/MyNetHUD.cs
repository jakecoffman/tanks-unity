using UnityEngine;using UnityEngine.Networking;using System.Collections;public class MyNetHUD: MonoBehaviour{    public NetworkManager manager;    [SerializeField]    public bool showGUI = true;    [SerializeField]    public int offsetX;    [SerializeField]    public int offsetY;    void Update()    {        if (!showGUI)            return;        // when disconnected        if (!NetworkClient.active && !NetworkServer.active)        {            if (Input.GetKeyDown(KeyCode.S))            {                manager.StartServer();            }            if (Input.GetKeyDown(KeyCode.H))            {                manager.StartHost();            }            if (Input.GetKeyDown(KeyCode.C))            {                manager.StartClient();            }        }        // when in game        if (NetworkServer.active && NetworkClient.active)        {            if (Input.GetKeyDown(KeyCode.X))            {                manager.StopHost();            }        }    }    void OnGUI()    {        if (!showGUI)            return;        int xpos = 10 + offsetX;        int ypos = 40 + offsetY;        int spacing = 24;        // when disconnected        if (!NetworkClient.active && !NetworkServer.active)        {            if (GUI.Button(new Rect(xpos, ypos, 200, 20), "LAN Host(H)"))            {                manager.networkAddress = "0.0.0.0";                manager.StartHost();            }            ypos += spacing;            if (GUI.Button(new Rect(xpos, ypos, 105, 20), "LAN Client(C)"))            {                manager.StartClient();            }            manager.networkAddress = GUI.TextField(new Rect(xpos + 100, ypos, 95, 20), manager.networkAddress);            ypos += spacing;            //if (GUI.Button(new Rect(xpos, ypos, 200, 20), "LAN Server Only(S)"))            //{            //    manager.StartServer();            //}        }        else        {            if (NetworkServer.active)            {                GUI.Label(new Rect(xpos, ypos, 300, 20), "Server: port=" + manager.networkPort);                ypos += spacing;            }            if (NetworkClient.active)            {                GUI.Label(new Rect(xpos, ypos, 300, 20), "Client: address=" + manager.networkAddress + " port=" + manager.networkPort);                ypos += spacing;            }        }        // when trying to connect to server        if (NetworkClient.active && !ClientScene.ready)        {            if (GUI.Button(new Rect(xpos, ypos, 200, 20), "Client Ready"))            {                ClientScene.Ready(manager.client.connection);                if (ClientScene.localPlayers.Count == 0)                {                    ClientScene.AddPlayer(0);                }            }            ypos += spacing;        }        // when in game        if (NetworkServer.active || NetworkClient.active)        {            if (GUI.Button(new Rect(xpos, ypos, 200, 20), "Stop (X)"))            {                if (NetworkServer.active)                {                    manager.StopHost();                }                if (NetworkClient.active)                {                    manager.StopClient();                }            }            ypos += spacing;        }    }}